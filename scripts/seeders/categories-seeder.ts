import { turso } from '../../src/lib/turso';

// Datos de categor√≠as para el seeder
const categoriesData = [
  {
    name: 'Banderas',
    slug: 'banderas',
    description:
      'Banderas institucionales, corporativas y promocionales para eventos especiales y representaci√≥n de marcas con calidad premium',
    imageId: 1,
    featured: false,
  },
  {
    name: 'Boligrafos',
    slug: 'boligrafos',
    description:
      'Bol√≠grafos personalizados de alta calidad ideales para regalos corporativos, eventos y promociones empresariales duraderas',
    imageId: 1,
    featured: false,
  },
  {
    name: 'Copas',
    slug: 'copas',
    description:
      'Copas trofeo elegantes para competencias deportivas, ceremonias de premiaci√≥n y reconocimientos especiales con dise√±o exclusivo',
    imageId: 1,
    featured: false,
  },
  {
    name: 'Cristales',
    slug: 'cristales',
    description:
      'Figuras, premios y piezas en cristal de alta calidad con grabados precisos para ocasiones especiales y reconocimientos',
    imageId: 1,
    featured: false,
  },
  {
    name: 'Cuadros',
    slug: 'cuadros',
    description:
      'Cuadros conmemorativos, diplomas y reconocimientos enmarcados con materiales premium para decoraci√≥n y homenajes especiales',
    imageId: 1,
    featured: false,
  },
  {
    name: 'Enmarcado',
    slug: 'enmarcado',
    description:
      'Servicio profesional de enmarcado para diplomas, fotograf√≠as y obras de arte con variedad de estilos y materiales disponibles',
    imageId: 1,
    featured: false,
  },
  {
    name: 'Escritura',
    slug: 'escritura',
    description:
      'Art√≠culos de escritura personalizados incluyendo portaminas, marcadores y sets ejecutivos para regalos empresariales de calidad',
    imageId: 1,
    featured: false,
  },
  {
    name: 'Grabado',
    slug: 'grabado',
    description:
      'Servicios de grabado l√°ser y tradicional sobre metales, cristales y pl√°sticos para personalizaci√≥n precisa de productos',
    imageId: 1,
    featured: false,
  },
  {
    name: 'Indumentaria',
    slug: 'indumentaria',
    description:
      'Ropa corporativa, uniformes y prendas promocionales personalizadas con bordado y estampado de alta durabilidad y calidad',
    imageId: 1,
    featured: false,
  },
  {
    name: 'Llaveros',
    slug: 'llaveros',
    description:
      'Llaveros personalizados en diversos materiales y dise√±os ideales para regalos promocionales, eventos y recuerdos corporativos',
    imageId: 1,
    featured: false,
  },
  {
    name: 'Mates',
    slug: 'mates',
    description:
      'Mates personalizados, sets de mate y yerbera con dise√±os exclusivos para regalos tradicionales y promociones especiales',
    imageId: 1,
    featured: false,
  },
  {
    name: 'Medallas',
    slug: 'medallas',
    description:
      'Medallas deportivas, conmemorativas y de reconocimiento en metales nobles con terminaciones de alta calidad y durabilidad',
    imageId: 1,
    featured: false,
  },
  {
    name: 'Merchandising',
    slug: 'merchandising',
    description:
      'Productos promocionales y merchandising corporativo para estrategias de marketing, fidelizaci√≥n de clientes y eventos especiales',
    imageId: 1,
    featured: false,
  },
  {
    name: 'Placas',
    slug: 'placas',
    description:
      'Placas recordatorias, identificatorias y conmemorativas en bronce, aluminio y acero para interiores y exteriores duraderas',
    imageId: 1,
    featured: false,
  },
  {
    name: 'Placas Profesionales',
    slug: 'placas-profesionales',
    description:
      'Placas para consultorios, profesionales independientes y empresas con dise√±os elegantes y informaci√≥n grabada permanentemente',
    imageId: 1,
    featured: false,
  },
  {
    name: 'Plaquetas',
    slug: 'plaquetas',
    description:
      'Plaquetas conmemorativas en metales nobles para reconocimientos, aniversarios y homenajes especiales con grabados precisos',
    imageId: 1,
    featured: false,
  },
  {
    name: 'Plaquetas Enmarcadas',
    slug: 'plaquetas-enmarcadas',
    description:
      'Plaquetas enmarcadas en madera con vidrio para reconocimientos institucionales, jubilaciones y eventos corporativos importantes',
    imageId: 1,
    featured: false,
  },
  {
    name: 'Platos y Bandejas',
    slug: 'platos-y-bandejas',
    description:
      'Platos y bandejas grabadas para aniversarios, bodas y eventos especiales con dise√±os personalizados y elegancia distintiva',
    imageId: 1,
    featured: false,
  },
  {
    name: 'Premios',
    slug: 'premios',
    description:
      'Premios y reconocimientos especiales en diversos materiales para ceremonias, logros destacados y eventos corporativos memorables',
    imageId: 1,
    featured: false,
  },
  {
    name: 'Protecci√≥n Sanitaria',
    slug: 'proteccion-sanitaria',
    description:
      'Elementos de protecci√≥n e higiene personalizados para empresas, instituciones y cumplimiento de protocolos sanitarios actuales',
    imageId: 1,
    featured: false,
  },
  {
    name: 'Regaleria',
    slug: 'regaleria',
    description:
      'Amplia variedad de regalos corporativos y personales para todas las ocasiones con opciones de personalizaci√≥n y calidad garantizada',
    imageId: 1,
    featured: false,
  },
  {
    name: 'Sellos',
    slug: 'sellos',
    description:
      'Sellos personalizados para oficinas, profesionales y empresas con diferentes tipos de entintado y dise√±os a medida',
    imageId: 1,
    featured: false,
  },
  {
    name: 'Trofeos',
    slug: 'trofeos',
    description:
      'Trofeos deportivos, acad√©micos y corporativos en diversos estilos y tama√±os para reconocer logros y competencias importantes',
    imageId: 1,
    featured: false,
  },
];

export class CategoriesSeeder {
  static async cleanDatabase() {
    console.log('üßπ Limpiando base de datos...');

    try {
      // Eliminar en orden debido a las foreign keys
      await turso.execute('DELETE FROM QuoteItem');
      await turso.execute('DELETE FROM Quote');
      await turso.execute('DELETE FROM ProductRelated');
      await turso.execute('DELETE FROM ProductCategory');
      await turso.execute('DELETE FROM ProductImage');
      await turso.execute('DELETE FROM Product');
      await turso.execute('DELETE FROM Category');
      await turso.execute('DELETE FROM Image');

      // Resetear autoincrement counters
      await turso.execute(
        'DELETE FROM sqlite_sequence WHERE name IN ("Product", "Category", "Image", "Quote", "QuoteItem")'
      );

      console.log('‚úÖ Base de datos limpiada exitosamente');
    } catch (error) {
      console.error('‚ùå Error limpiando base de datos:', error);
      throw error;
    }
  }

  static async seedImages() {
    console.log('üì∏ Creando imagen por defecto...');

    try {
      const { rows } = await turso.execute({
        sql: `
          INSERT INTO Image (url, alt, tag, observation)
          VALUES (?, ?, ?, ?)
          RETURNING id
        `,
        args: [
          'https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=800&h=600&fit=crop',
          'Imagen por defecto para categor√≠as',
          'category',
          'Imagen placeholder para todas las categor√≠as',
        ],
      });

      const imageId = rows[0]?.id as number;
      console.log(`  ‚úÖ Imagen creada (ID: ${imageId})`);
      return [imageId];
    } catch (error) {
      console.error('‚ùå Error creando imagen:', error);
      throw error;
    }
  }

  static async seedCategories(imageIds: number[]) {
    console.log('üìÇ Creando categor√≠as...');

    const categoryIds: number[] = [];

    for (let i = 0; i < categoriesData.length; i++) {
      const category = categoriesData[i];
      const imageId = imageIds[0]; // Usar la primera (y √∫nica) imagen

      try {
        const { rows } = await turso.execute({
          sql: `
            INSERT INTO Category (name, slug, description, imageId, featured)
            VALUES (?, ?, ?, ?, ?)
            RETURNING id
          `,
          args: [
            category.name,
            category.slug,
            category.description,
            imageId,
            category.featured,
          ],
        });

        const categoryId = rows[0]?.id as number;
        categoryIds.push(categoryId);
        console.log(
          `  ‚úÖ Categor√≠a creada: ${category.name} (ID: ${categoryId})`
        );
      } catch (error) {
        console.error(`  ‚ùå Error creando categor√≠a ${category.name}:`, error);
        throw error;
      }
    }

    return categoryIds;
  }

  static async run() {
    console.log('üå± Iniciando seeder de categor√≠as...\n');

    try {
      // 1. Limpiar base de datos
      await this.cleanDatabase();
      console.log('');

      // 2. Crear im√°genes
      const imageIds = await this.seedImages();
      console.log('');

      // 3. Crear categor√≠as
      const categoryIds = await this.seedCategories(imageIds);
      console.log('');

      // 4. Resumen
      console.log('üìä Resumen del seeding:');
      console.log(`  ‚Ä¢ ${imageIds.length} im√°genes creadas`);
      console.log(`  ‚Ä¢ ${categoryIds.length} categor√≠as creadas`);
      console.log(
        `  ‚Ä¢ ${categoriesData.filter((c) => c.featured).length} categor√≠as destacadas`
      );
      console.log('');
      console.log('üéâ ¬°Seeder completado exitosamente!');

      return {
        success: true,
        imagesCreated: imageIds.length,
        categoriesCreated: categoryIds.length,
        imageIds,
        categoryIds,
      };
    } catch (error) {
      console.error('üí• Error ejecutando seeder:', error);
      throw error;
    }
  }

  static async verify() {
    console.log('üîç Verificando datos creados...\n');

    try {
      // Verificar im√°genes
      const { rows: images } = await turso.execute(
        'SELECT COUNT(*) as count FROM Image'
      );
      const imageCount = images[0]?.count as number;

      // Verificar categor√≠as
      const { rows: categories } = await turso.execute(
        'SELECT COUNT(*) as count FROM Category'
      );
      const categoryCount = categories[0]?.count as number;

      // Verificar categor√≠as destacadas
      const { rows: featuredCategories } = await turso.execute(
        'SELECT COUNT(*) as count FROM Category WHERE featured = 1'
      );
      const featuredCount = featuredCategories[0]?.count as number;

      console.log('üìà Estado actual de la base de datos:');
      console.log(`  ‚Ä¢ Im√°genes: ${imageCount}`);
      console.log(`  ‚Ä¢ Categor√≠as: ${categoryCount}`);
      console.log(`  ‚Ä¢ Categor√≠as destacadas: ${featuredCount}`);
      console.log('');

      // Mostrar categor√≠as creadas
      const { rows: categoryList } = await turso.execute(`
        SELECT c.id, c.name, c.slug, c.featured, i.url as imageUrl
        FROM Category c
        LEFT JOIN Image i ON c.imageId = i.id
        ORDER BY c.id
      `);

      console.log('üìã Categor√≠as creadas:');
      categoryList.forEach((cat: any) => {
        const featured = cat.featured ? '‚≠ê' : '  ';
        console.log(`  ${featured} ${cat.id}. ${cat.name} (${cat.slug})`);
      });

      return {
        imageCount,
        categoryCount,
        featuredCount,
        categories: categoryList,
      };
    } catch (error) {
      console.error('‚ùå Error verificando datos:', error);
      throw error;
    }
  }
}

// Si se ejecuta directamente
if (import.meta.url === `file://${process.argv[1]}`) {
  CategoriesSeeder.run()
    .then(() => CategoriesSeeder.verify())
    .then(() => {
      console.log('‚ú® Proceso completado');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• Error fatal:', error);
      process.exit(1);
    });
}

---
import { Image } from 'astro:assets';
import type { ProductWithCategoriesAndImages } from '@/shared/types';

const { product } = Astro.props;

const productDetails = product as ProductWithCategoriesAndImages;
---

<div class='mx-auto max-w-[1200px] my-20'>
  <div class='flex flex-col lg:flex-row gap-12 w-full'>
    <div class='w-full lg:w-1/2 mx-auto px-4'>
      <Image
        id='main-image'
        src={productDetails.images[0].url}
        alt={productDetails.images[0].alt}
        width={400}
        height={400}
        class='object-contain mx-auto object-center w-[400px] h-[400px]'
      />
      <div class='flex gap-2 mt-4 max-w-[400px] mx-auto'>
        {
          productDetails.images.map((image, index) => (
            <div
              class='min-w-0 cursor-pointer hover:opacity-80 transition-opacity'
              data-image-index={index}
            >
              <Image
                src={image.url}
                alt={image.alt}
                width={90}
                height={90}
                class='object-contain object-center w-[90px] h-[90px]'
              />
            </div>
          ))
        }
      </div>
    </div>

    <section class='w-full lg:w-1/2 px-4 flex flex-col justify-between gap-8'>
      <h2 class='text-2xl font-semibold text-orange-500'>
        {productDetails.name} - {productDetails.sku}
      </h2>

      <div class='flex flex-col gap-2'>
        <h3 class='font-semibold'>Descripción</h3>
        <p class='ml-4 text-muted-foreground'>{productDetails.description}</p>
      </div>

      <div class='flex flex-col gap-2'>
        <h3 class='font-semibold'>Categorías</h3>
        <p class='ml-4 text-muted-foreground'>
          {
            productDetails.categories
              .map((category) => category.name)
              .join(', ')
          }
        </p>
      </div>

      <div class='flex flex-col gap-2'>
        <h3 class='font-semibold'>Cantidad</h3>
        <div class='flex items-center gap-4'>
          <button id='btn-quantity-decrement' class='btn-quantity w-8 h-8'
            >-</button
          >
          <input
            class='text-center w-12 h-8 border border-gray-300 rounded-md'
            type='text'
            min='1'
            value='1'
          />
          <button id='btn-quantity-increment' class='btn-quantity w-8 h-8'
            >+</button
          >
        </div>
      </div>

      <button
        class='text-lg font-semibold bg-orange-500 rounded-sm flex items-center justify-center
    hover:bg-orange-500/80 transition-all duration-300 hover:cursor-pointer text-white py-2 w-full
    disabled:bg-gray-500 disabled:cursor-not-allowed'
        id='btn-add-to-cart'
      >
        Añadir al carrito
      </button>
    </section>
  </div>

  <input type='hidden' id='product-id' value={productDetails.id} />
</div>

<script>
  import { itemsInCart } from '@/store';
  import { CartCookiesClient } from '@/utils/cart-cookies';
  import { navigate } from 'astro:transitions/client';

  document.addEventListener('astro:page-load', () => {
    const quantityInput = document.querySelector('input') as HTMLInputElement;
    const productIdInput = document.querySelector(
      '#product-id'
    ) as HTMLInputElement;
    const mainImage = document.querySelector('#main-image') as HTMLImageElement;

    // Obtener el ID del producto
    const productId = productIdInput.value;

    // Verificar si el producto ya está en el carrito y obtener su cantidad
    const cart = CartCookiesClient.getCart();
    const existingCartItem = cart.find((item) => item.productId === productId);

    // Inicializar quantity con el valor del carrito o 1 por defecto
    let quantity = existingCartItem ? existingCartItem.quantity : 1;

    // Establecer el valor inicial del input
    quantityInput.value = quantity.toString();

    const decrementButton = document.querySelector(
      '#btn-quantity-decrement'
    ) as HTMLButtonElement;
    const incrementButton = document.querySelector(
      '#btn-quantity-increment'
    ) as HTMLButtonElement;
    const addToCartButton = document.querySelector(
      '#btn-add-to-cart'
    ) as HTMLButtonElement;

    if (!incrementButton || !quantityInput) {
      return;
    }

    // Funcionalidad para cambiar imagen principal
    const thumbnailImages = document.querySelectorAll('[data-image-index]');
    thumbnailImages.forEach((thumbnail) => {
      thumbnail.addEventListener('click', () => {
        const imageIndex = parseInt(
          thumbnail.getAttribute('data-image-index') || '0'
        );
        const clickedImage = thumbnail.querySelector('img') as HTMLImageElement;

        if (mainImage && clickedImage) {
          mainImage.src = clickedImage.src;
          mainImage.alt = clickedImage.alt;
        }
      });
    });

    incrementButton.addEventListener('click', () => {
      quantity++;
      quantityInput.value = quantity.toString();
    });

    decrementButton.addEventListener('click', () => {
      quantity = Math.max(quantity - 1, 1);
      quantityInput.value = quantity.toString();
    });

    addToCartButton.addEventListener('click', async () => {
      addToCartButton.disabled = true;

      const cart = CartCookiesClient.updateItem({
        productId: productIdInput.value,
        quantity: Number(quantityInput.value),
      });

      itemsInCart.set(cart.length);

      // TODO: utilizar view transition api
      // addToCartButton.disabled = false;

      //  window.location.href = '/cart';
      await navigate('/cart');
    });
  });
</script>

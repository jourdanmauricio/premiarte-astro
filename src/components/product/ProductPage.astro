---
import { Image } from 'astro:assets';
import type { ProductWithCategoriesAndImages } from '@/shared/types';

const { product } = Astro.props;

const productDetails = product as ProductWithCategoriesAndImages;
---

<div class='mx-auto max-w-[1200px] my-20'>
  <div class='flex flex-col lg:flex-row gap-12 w-full'>
    <div class='w-full lg:w-1/2 mx-auto px-4'>
      <Image
        id='main-image'
        src={productDetails.images[0].url}
        alt={productDetails.images[0].alt}
        width={400}
        height={400}
        class='object-contain mx-auto object-center w-[400px] h-[400px]'
      />
      <div class='flex gap-2 mt-4 max-w-[400px] mx-auto'>
        {
          productDetails.images.map((image, index) => (
            <div
              class='min-w-0 cursor-pointer hover:opacity-80 transition-opacity'
              data-image-index={index}
            >
              <Image
                src={image.url}
                alt={image.alt}
                width={90}
                height={90}
                class='object-contain object-center w-[90px] h-[90px]'
              />
            </div>
          ))
        }
      </div>
    </div>

    <section class='w-full lg:w-1/2 px-4 flex flex-col justify-between gap-8'>
      <h2 class='text-2xl font-semibold text-orange-500'>
        {productDetails.name} - {productDetails.sku}
      </h2>

      <div class='flex flex-col gap-2'>
        <h3 class='font-semibold'>Descripción</h3>
        <p class='ml-4 text-muted-foreground'>{productDetails.description}</p>
      </div>

      <div class='flex flex-col gap-2'>
        <h3 class='font-semibold'>Categorías</h3>
        <p class='ml-4 text-muted-foreground'>
          {
            productDetails.categories
              .map((category) => category.name)
              .join(', ')
          }
        </p>
      </div>

      <div class='flex flex-col gap-2'>
        <h3 class='font-semibold'>Cantidad</h3>
        <div class='flex items-center gap-4'>
          <button id='btn-quantity-decrement' class='btn-quantity w-8 h-8'
            >-</button
          >
          <input
            class='text-center w-12 h-8 border border-gray-300 rounded-md'
            type='text'
            min='1'
            value='1'
          />
          <button id='btn-quantity-increment' class='btn-quantity w-8 h-8'
            >+</button
          >
        </div>
      </div>

      <!-- Botón único para cuando NO está en carrito -->
      <button
        class='text-lg font-semibold bg-orange-500 rounded-sm flex items-center justify-center
    hover:bg-orange-500/80 transition-all duration-300 hover:cursor-pointer text-white py-2 w-full
    disabled:bg-gray-500 disabled:cursor-not-allowed'
        id='btn-add-to-cart'
      >
        Añadir al carrito
      </button>

      <!-- Botones dobles para cuando SÍ está en carrito -->
      <div id='btn-cart-actions' class='hidden gap-4'>
        <button
          class='text-lg font-semibold bg-orange-500 rounded-sm flex items-center justify-center
    hover:bg-orange-500/80 transition-all duration-300 hover:cursor-pointer text-white py-2 flex-1'
          id='btn-add-more'
        >
          Agregar otros productos
        </button>
        <button
          class='text-lg font-semibold bg-blue-500 rounded-sm flex items-center justify-center
      hover:bg-blue-500/80 transition-all duration-300 hover:cursor-pointer text-white py-2 flex-1'
          id='btn-view-cart'
        >
          Ver carrito
        </button>
      </div>
    </section>
  </div>

  <input type='hidden' id='product-id' value={productDetails.id} />

  <!-- ToasterProvider para esta página específica -->
  <div id='toaster-container'></div>
</div>

<script>
  import { itemsInCart } from '@/store';
  import { CartCookiesClient } from '@/utils/cart-cookies';
  import { navigate } from 'astro:transitions/client';

  // Variable para evitar múltiples inicializaciones
  let isInitialized = false;

  const initializeProductPage = () => {
    // Evitar múltiples inicializaciones
    if (isInitialized) {
      console.log('ProductPage ya inicializado, saltando...');
      return;
    }

    const quantityInput = document.querySelector('input') as HTMLInputElement;
    const productIdInput = document.querySelector(
      '#product-id'
    ) as HTMLInputElement;
    const mainImage = document.querySelector('#main-image') as HTMLImageElement;

    // Verificar que todos los elementos necesarios existan
    if (!quantityInput || !productIdInput) {
      return;
    }

    // Marcar como inicializado
    isInitialized = true;

    // Obtener el ID del producto
    const productId = productIdInput.value;

    // Función para verificar el estado actual del carrito
    const checkCartStatus = () => {
      const cart = CartCookiesClient.getCart();
      return cart.find((item) => item.productId === productId);
    };

    // Verificar estado inicial del carrito
    const existingCartItem = checkCartStatus();

    // Inicializar quantity con el valor del carrito o 1 por defecto
    let quantity = existingCartItem ? existingCartItem.quantity : 1;

    // Establecer el valor inicial del input
    quantityInput.value = quantity.toString();

    const decrementButton = document.querySelector(
      '#btn-quantity-decrement'
    ) as HTMLButtonElement;
    const incrementButton = document.querySelector(
      '#btn-quantity-increment'
    ) as HTMLButtonElement;
    const addToCartButton = document.querySelector(
      '#btn-add-to-cart'
    ) as HTMLButtonElement;
    const cartActionsDiv = document.querySelector(
      '#btn-cart-actions'
    ) as HTMLDivElement;
    const viewCartButton = document.querySelector(
      '#btn-view-cart'
    ) as HTMLButtonElement;
    const addMoreButton = document.querySelector(
      '#btn-add-more'
    ) as HTMLButtonElement;

    if (!incrementButton || !quantityInput) {
      return;
    }

    // Función para mostrar/ocultar botones según el estado del carrito
    const updateButtonVisibility = (isInCart: boolean) => {
      if (isInCart) {
        addToCartButton.classList.add('hidden');
        cartActionsDiv.classList.remove('hidden');
        cartActionsDiv.classList.add('flex');
      } else {
        addToCartButton.classList.remove('hidden');
        cartActionsDiv.classList.add('hidden');
        cartActionsDiv.classList.remove('flex');
      }
    };

    // Estado inicial
    updateButtonVisibility(!!existingCartItem);

    // Funcionalidad para cambiar imagen principal
    const thumbnailImages = document.querySelectorAll('[data-image-index]');
    thumbnailImages.forEach((thumbnail) => {
      thumbnail.addEventListener('click', () => {
        const imageIndex = parseInt(
          thumbnail.getAttribute('data-image-index') || '0'
        );
        const clickedImage = thumbnail.querySelector('img') as HTMLImageElement;

        if (mainImage && clickedImage) {
          mainImage.src = clickedImage.src;
          mainImage.alt = clickedImage.alt;
        }
      });
    });

    incrementButton.addEventListener('click', () => {
      quantity++;
      quantityInput.value = quantity.toString();
    });

    decrementButton.addEventListener('click', () => {
      quantity = Math.max(quantity - 1, 1);
      quantityInput.value = quantity.toString();
    });

    // Event listener para el botón "Añadir al carrito"
    addToCartButton.addEventListener('click', async () => {
      // Verificar el estado del carrito ANTES de agregar
      const wasInCart = checkCartStatus();

      const cart = CartCookiesClient.updateItem({
        productId: productIdInput.value,
        quantity: Number(quantityInput.value),
      });

      itemsInCart.set(cart.length);

      // Mostrar los botones dobles después de agregar
      updateButtonVisibility(true);

      // Mostrar toast de confirmación SIEMPRE que se agregue al carrito
      try {
        const { toast } = await import('sonner');
        console.log('Toast importado dinámicamente:', typeof toast);

        toast.success('¡Producto agregado al carrito!', {
          description: `Cantidad: ${quantityInput.value}`,
          duration: 3000,
        });
        console.log('Toast ejecutado correctamente');
      } catch (error) {
        console.error('Error al importar o ejecutar toast:', error);
        // Fallback: mostrar alerta temporal
        alert(
          `¡Producto agregado al carrito! Cantidad: ${quantityInput.value}`
        );
      }

      console.log('Producto agregado al carrito, mostrando botones de acción');
    });

    // Event listener para el botón "Ver carrito"
    viewCartButton.addEventListener('click', async () => {
      // Actualizar la cantidad del producto antes de navegar al carrito
      const cart = CartCookiesClient.updateItem({
        productId: productIdInput.value,
        quantity: Number(quantityInput.value),
      });

      itemsInCart.set(cart.length);
      console.log(
        'Cantidad actualizada antes de ir al carrito:',
        quantityInput.value
      );

      await navigate('/cart');
    });

    // Event listener para el botón "Agregar otros productos"
    addMoreButton.addEventListener('click', async () => {
      await navigate('/categoria/productos');
    });
  };

  // Función de retry con delay
  const tryInitialize = () => {
    setTimeout(() => {
      initializeProductPage();
    }, 100);
  };

  // Event listener principal
  document.addEventListener('astro:page-load', () => {
    // Resetear el flag de inicialización en cada navegación
    isInitialized = false;
    tryInitialize();
  });

  // También intentar inicializar cuando el DOM esté listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', tryInitialize);
  } else {
    tryInitialize();
  }
</script>

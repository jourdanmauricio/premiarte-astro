---
import MainLayout from '@/layouts/MainLayout.astro';
import * as actions from '@/actions/products/get-products-by-category';
import * as actionsCategories from '@/actions/categoeries/get-categories-by-page.action';
import type { Category } from '@/shared/types';
import { Database } from '@/lib/db';
import ProductsPage from '@/components/products/ProductsPage.astro';

export const prerender = true;

export async function getStaticPaths() {
  try {
    // Obtener todas las categorías de la base de datos
    const categories = await Database.getAllCategories({});
    const paths = [];
    const limit = 9; // Usar el mismo límite que en la acción

    // Para cada categoría, generar páginas para cada página de paginación
    for (const category of categories) {
      // Obtener el total de productos para esta categoría
      const totalProducts = Number(
        await Database.countProductsByCategory(Number(category.id))
      );

      const totalPages = Math.ceil(totalProducts / limit);

      // Generar rutas para cada página (al menos 1 página)
      for (let page = 1; page <= Math.max(totalPages, 1); page++) {
        paths.push({
          params: {
            slug:
              page === 1
                ? String(category.slug)
                : `${String(category.slug)}/page/${page}`,
          },
          props: {
            categorySlug: String(category.slug),
            currentPage: page,
          },
        });
      }
    }

    // Manejar la ruta especial /categoria/productos (todos los productos)
    const totalProducts = Number(await Database.countProducts());
    const productsTotalPages = Math.ceil(totalProducts / limit);

    for (let page = 1; page <= Math.max(productsTotalPages, 1); page++) {
      paths.push({
        params: {
          slug: page === 1 ? 'productos' : `productos/page/${page}`,
        },
        props: {
          categorySlug: 'productos',
          currentPage: page,
        },
      });
    }

    return paths;
  } catch (error) {
    console.error('Error generating static paths for categories:', error);
    return [];
  }
}

// Obtener props de getStaticPaths
const { categorySlug, currentPage } = Astro.props;

// Extraer la categoría del slug para casos donde no se pase como prop
const { slug } = Astro.params;
const slugString = typeof slug === 'string' ? slug : '';
const actualCategorySlug =
  categorySlug ||
  (slugString?.includes('/page/') ? slugString.split('/page/')[0] : slugString);
const actualPage = currentPage || 1;

const { data, error } = await Astro.callAction(actions.getProductsByCategory, {
  category: actualCategorySlug ?? '',
  page: actualPage,
});

if (error) {
  Astro.redirect('/productos');
}

if (data?.products.length === 0) {
  Astro.redirect('/productos');
}

const { products, totalPages } = data || { products: [], totalPages: 0 };

const url = Astro.url;
const pathname = url.pathname;

const { data: categoriesData, error: categoriesError } = await Astro.callAction(
  actionsCategories.getCategoriesByPage,
  {}
);

if (categoriesError) {
  Astro.redirect('/categorias');
}

const categories = categoriesData as unknown as Category[];
---

{/*  image={categories[0].image.url} */}
<MainLayout title={slugString} description={categories[0]?.description}>
  <ProductsPage
    categories={categories}
    products={products}
    totalPages={totalPages}
    pathname={pathname}
    currentPage={actualPage}
    categorySlug={actualCategorySlug}
  />
</MainLayout>

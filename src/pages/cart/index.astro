---
import MainLayout from '@/layouts/MainLayout.astro';
import { actions } from 'astro:actions';

const { data, error } = await Astro.callAction(
  actions.loadProductsFromCart,
  {}
);

if (error || !data) {
  return Astro.redirect('/');
}

// obtener session de clerk, nombre de usuario
const { userId } = Astro.locals.auth();
const user = await Astro.locals.currentUser();

const products = data;
---

<MainLayout title='Carrito de compras'>
  <section class='container grid grid-cols-1 sm:grid-cols-2 gap-4 my-20'>
    <!-- products -->
    <div class='order-2 sm:order-1'>
      <h2>Productos</h2>
      <a
        href='javascript:history.back()'
        class='hover: underline text-orange-500'>Regresar</a
      >

      {
        products.map((product) => (
          <div class='flex  gap-5 mt-5'>
            <img
              src={product.image.url}
              alt={product.image.alt}
              class='w-20 h-20 object-contain rounded-md border'
            />
            <div>
              <a href={`/productos/${product.slug}`} class='hover: underline'>
                {product.name}
              </a>
              <p>Cantidad: {product.quantity}</p>
              <button data-id={product.productId} class='btn-delete text-white'>
                Remover
              </button>
            </div>
          </div>
        ))
      }
    </div>

    <!-- presupuesto -->
    <div class='bg-slate-50 text-slate-500 p-6 rounded-lg shadow-lg order-1'>
      <h2 class='text-lg font-semibold mb-4'>Solicitud de presupuesto</h2>

      <p class='mb-4'>
        Por favor, complete los siguientes datos para solicitar su presupuesto.
      </p>

      <form
        id='quote-form'
        action='/api/presupuestos'
        method='POST'
        class='space-y-4'
        novalidate
      >
        <div class='grid grid-cols-1 sm:grid-cols-2 gap-4'>
          <div class='space-y-1'>
            <label for='name' class='block text-sm font-medium text-slate-700'>
              Nombre *
            </label>
            <input
              type='text'
              id='name'
              name='name'
              value={user?.firstName}
              placeholder='Ingrese su nombre'
              class='w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors'
              required
            />
            <span
              id='name-error'
              class='text-red-500 text-xs h-4 block opacity-0 transition-opacity duration-200'
            >
              Requerido
            </span>
          </div>

          <div class='space-y-1'>
            <label
              for='last_name'
              class='block text-sm font-medium text-slate-700'
            >
              Apellido *
            </label>
            <input
              type='text'
              id='last_name'
              name='last_name'
              value={user?.lastName}
              placeholder='Ingrese su apellido'
              class='w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors'
              required
            />
            <span
              id='last_name-error'
              class='text-red-500 text-xs h-4 block opacity-0 transition-opacity duration-200'
            >
              Requerido
            </span>
          </div>
        </div>

        <div class='space-y-1'>
          <label for='email' class='block text-sm font-medium text-slate-700'>
            Correo electrónico *
          </label>
          <input
            type='email'
            id='email'
            name='email'
            value={user?.emailAddresses[0].emailAddress}
            placeholder='ejemplo@correo.com'
            class='w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors'
            required
          />
          <span
            id='email-error'
            class='text-red-500 text-xs h-4 block opacity-0 transition-opacity duration-200'
          >
            Ingrese un correo electrónico válido
          </span>
        </div>

        <div class='space-y-1'>
          <label for='phone' class='block text-sm font-medium text-slate-700'>
            Teléfono *
          </label>
          <input
            type='tel'
            id='phone'
            name='phone'
            placeholder='(+54) 11 1234-5678'
            class='w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors'
            required
          />
          <span
            id='phone-error'
            class='text-red-500 text-xs h-4 block opacity-0 transition-opacity duration-200'
          >
            Requerido
          </span>
        </div>

        <div class='space-y-1'>
          <label for='message' class='block text-sm font-medium text-slate-700'>
            Mensaje adicional
          </label>
          <textarea
            id='message'
            name='message'
            rows='3'
            placeholder='Agregue cualquier detalle adicional sobre su solicitud...'
            class='w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors resize-none'
          ></textarea>
        </div>

        <div class='pt-2'>
          <button
            id='submit-button'
            type='submit'
            class={`w-full font-medium py-3 px-4 rounded-md shadow-sm transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 ${
              products.length === 0
                ? 'bg-gray-400 text-gray-600 cursor-not-allowed'
                : 'bg-blue-600 hover:bg-blue-700 text-white focus:ring-blue-500'
            }`}
            disabled={products.length === 0}
          >
            {
              products.length === 0
                ? 'Agregue productos al carrito'
                : 'Solicitar presupuesto'
            }
          </button>
        </div>

        <p class='text-xs text-slate-500 text-center'>* Campos obligatorios</p>
      </form>
    </div>
  </section>
</MainLayout>

<script>
  import { itemsInCart } from '@/store';
  import { CartCookiesClient } from '@/utils';
  import { navigate } from 'astro:transitions/client';
  import { quoteFormSchema } from '@/shared/schemas';

  document.addEventListener('astro:page-load', () => {
    // Funcionalidad del carrito
    const deleteButtons: NodeListOf<HTMLButtonElement> =
      document.querySelectorAll('.btn-delete');
    deleteButtons.forEach((button) => {
      button.addEventListener('click', (event) => {
        const target = event.target as HTMLButtonElement;
        const productId = button.dataset.id ?? '';

        const cart = CartCookiesClient.removeItem(productId as string);

        itemsInCart.set(cart.length);
        // window.location.reload();
        navigate('/cart');
      });
    });

    // Validación del formulario
    const form = document.getElementById('quote-form') as HTMLFormElement;
    const nameInput = document.getElementById('name') as HTMLInputElement;
    const lastNameInput = document.getElementById(
      'last_name'
    ) as HTMLInputElement;
    const emailInput = document.getElementById('email') as HTMLInputElement;
    const phoneInput = document.getElementById('phone') as HTMLInputElement;

    const nameError = document.getElementById('name-error') as HTMLSpanElement;
    const lastNameError = document.getElementById(
      'last_name-error'
    ) as HTMLSpanElement;
    const emailError = document.getElementById(
      'email-error'
    ) as HTMLSpanElement;
    const phoneError = document.getElementById(
      'phone-error'
    ) as HTMLSpanElement;

    // Verificar que todos los elementos existan
    if (!form) {
      console.error('Formulario no encontrado');
      return;
    }
    if (!nameInput) {
      console.error('Campo nombre no encontrado');
      return;
    }
    if (!lastNameInput) {
      console.error('Campo apellido no encontrado');
      return;
    }
    if (!emailInput) {
      console.error('Campo email no encontrado');
      return;
    }
    if (!phoneInput) {
      console.error('Campo teléfono no encontrado');
      return;
    }
    if (!nameError || !lastNameError || !emailError || !phoneError) {
      console.error('Elementos de error no encontrados');
      return;
    }

    // Función para validar un campo específico con Zod
    const validateField = (fieldName: string, value: string) => {
      try {
        const fieldSchema =
          quoteFormSchema.shape[
            fieldName as keyof typeof quoteFormSchema.shape
          ];
        fieldSchema.parse(value);
        return { success: true, error: null };
      } catch (error: any) {
        return {
          success: false,
          error: error.errors[0]?.message || 'Error de validación',
        };
      }
    };

    // Función para validar todo el formulario
    const validateForm = () => {
      const formData = {
        name: nameInput.value.trim(),
        last_name: lastNameInput.value.trim(),
        email: emailInput.value.trim(),
        phone: phoneInput.value.trim(),
        message:
          (document.getElementById('message') as HTMLTextAreaElement)?.value ||
          '',
      };

      const result = quoteFormSchema.safeParse(formData);
      return result;
    };

    // Función para mostrar error
    const showError = (
      errorElement: HTMLSpanElement,
      inputElement: HTMLInputElement
    ) => {
      errorElement.classList.remove('opacity-0');
      errorElement.classList.add('opacity-100');
      inputElement.classList.add('border-red-500');
      inputElement.classList.remove('border-slate-300');
    };

    // Función para ocultar error
    const hideError = (
      errorElement: HTMLSpanElement,
      inputElement: HTMLInputElement
    ) => {
      errorElement.classList.remove('opacity-100');
      errorElement.classList.add('opacity-0');
      inputElement.classList.remove('border-red-500');
      inputElement.classList.add('border-slate-300');
    };

    // Validación en tiempo real con Zod
    nameInput.addEventListener('blur', () => {
      const validation = validateField('name', nameInput.value.trim());
      if (!validation.success) {
        nameError.textContent = validation.error;
        showError(nameError, nameInput);
      } else {
        hideError(nameError, nameInput);
      }
    });

    lastNameInput.addEventListener('blur', () => {
      const validation = validateField('last_name', lastNameInput.value.trim());
      if (!validation.success) {
        lastNameError.textContent = validation.error;
        showError(lastNameError, lastNameInput);
      } else {
        hideError(lastNameError, lastNameInput);
      }
    });

    emailInput.addEventListener('blur', () => {
      const validation = validateField('email', emailInput.value.trim());
      if (!validation.success) {
        emailError.textContent = validation.error;
        showError(emailError, emailInput);
      } else {
        hideError(emailError, emailInput);
      }
    });

    phoneInput.addEventListener('blur', () => {
      const validation = validateField('phone', phoneInput.value.trim());
      if (!validation.success) {
        phoneError.textContent = validation.error;
        showError(phoneError, phoneInput);
      } else {
        hideError(phoneError, phoneInput);
      }
    });

    // Validación al enviar el formulario
    form.addEventListener('submit', (event) => {
      const submitButton = document.getElementById(
        'submit-button'
      ) as HTMLButtonElement;

      if (submitButton.disabled) {
        event.preventDefault();
        return;
      }

      // Validar todo el formulario con Zod
      const validation = validateForm();

      if (!validation.success) {
        // Limpiar errores previos
        hideError(nameError, nameInput);
        hideError(lastNameError, lastNameInput);
        hideError(emailError, emailInput);
        hideError(phoneError, phoneInput);

        // Mostrar errores específicos de Zod
        validation.error.issues.forEach((issue) => {
          const fieldName = issue.path[0] as string;
          const message = issue.message;

          switch (fieldName) {
            case 'name':
              nameError.textContent = message;
              showError(nameError, nameInput);
              break;
            case 'last_name':
              lastNameError.textContent = message;
              showError(lastNameError, lastNameInput);
              break;
            case 'email':
              emailError.textContent = message;
              showError(emailError, emailInput);
              break;
            case 'phone':
              phoneError.textContent = message;
              showError(phoneError, phoneInput);
              break;
          }
        });
      }

      // Si hay errores, prevenir el envío
      if (!validation.success) {
        event.preventDefault();

        // Hacer scroll al primer campo con error
        const firstErrorField = form.querySelector(
          '.border-red-500'
        ) as HTMLElement;
        if (firstErrorField) {
          firstErrorField.scrollIntoView({
            behavior: 'smooth',
            block: 'center',
          });
          firstErrorField.focus();
        }
      }
    });
  });
</script>

---
import MainLayout from '@/layouts/MainLayout.astro';
import { actions } from 'astro:actions';

const { data, error } = await Astro.callAction(
  actions.loadProductsFromCart,
  {}
);

if (error || !data) {
  return Astro.redirect('/');
}

// obtener session de clerk, nombre de usuario
const user = await Astro.locals.currentUser();

const products = data;
---

<MainLayout title='Carrito de compras'>
  <section class='max-w-[1200px] container mx-auto my-20 px-4 md:px-0'>
    <h2 class='text-2xl font-semibold'>Solicitar presupuesto</h2>
    <!-- <a href='javascript:history.back()' class='hover: underline text-orange-500'
      >Regresar</a
    > -->
    <div class='grid grid-cols-1 md:grid-cols-2 gap-12 my-20'>
      <!-- products -->

      <article
        class='order-2 sm:order-1 bg-slate-50 p-6 rounded-lg shadow-lg text-slate-900 h-fit'
      >
        {
          products.map((product) => (
            <div
              class='flex gap-8 mt-4 w-full border-b pb-4 border-gray-200 last:border-b-0'
              data-product-id={product.productId}
            >
              <img
                src={product.image.url}
                alt={product.image.alt}
                class='w-28 h-28 object-contain rounded-md border'
              />
              <div class='flex flex-col gap-2 justify-between items-start w-full'>
                <a href={`/productos/${product.slug}`} class='hover: underline'>
                  {product.name}
                </a>
                <div class='flex gap-2 items-center justify-between w-full'>
                  <h3 class=''>Cantidad</h3>
                  <div class='flex items-center gap-4'>
                    <button
                      type='button'
                      class='btn-quantity-decrement flex items-center justify-center w-8 h-8 cursor-pointer font-medium py-3 px-4 rounded-md shadow-sm transition-colors duration-200 
                         bg-blue-600 hover:bg-blue-700 text-white'
                      data-product-id={product.productId}
                    >
                      -
                    </button>
                    <input
                      class='text-center w-12 h-8 border border-gray-300 rounded-md'
                      type='text'
                      min='1'
                      value={product.quantity}
                      data-product-id={product.productId}
                    />
                    <button
                      class='btn-quantity-increment flex items-center justify-center w-8 h-8 cursor-pointer font-medium py-3 px-4 rounded-md shadow-sm transition-colors duration-200 
                         bg-blue-600 hover:bg-blue-700 text-white'
                      data-product-id={product.productId}
                      type='button'
                    >
                      +
                    </button>
                  </div>
                </div>
                <button
                  data-id={product.productId}
                  class='btn-delete text-red-500 hover:text-red-600 transition-colors duration-300 hover:cursor-pointer ml-auto'
                >
                  Remover
                </button>
              </div>
            </div>
          ))
        }
        <p class='text-slate-500 ml-auto text-end mt-4'>
          <!-- Cantidad de productos: {products.length} -->
          <a href='/categoria/productos' class='hover: underline text-blue-600'
            >Agregar más productos</a
          >
        </p>
      </article>

      <!-- presupuesto -->
      <article
        class='bg-slate-50 text-slate-500 p-6 rounded-lg shadow-lg order-1 h-fit sticky top-0'
      >
        <h2 class='text-lg font-semibold mb-4'>Solicitud de presupuesto</h2>

        <p class='mb-4'>
          Por favor, complete los siguientes datos para solicitar su
          presupuesto.
        </p>

        <form id='budget-form' method='POST' class='space-y-4' novalidate>
          <div class='space-y-1'>
            <label for='name' class='block text-sm font-medium text-slate-700'>
              Nombre y Apellido *
            </label>
            <input
              type='text'
              id='name'
              name='name'
              value={user?.firstName + ' ' + user?.lastName}
              placeholder='Ingrese su nombre'
              class='w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors'
              required
            />
            <span
              id='name-error'
              class='text-red-500 text-xs h-4 block opacity-0 transition-opacity duration-200'
            >
              Requerido
            </span>
          </div>

          <div class='space-y-1'>
            <label for='email' class='block text-sm font-medium text-slate-700'>
              Correo electrónico *
            </label>
            <input
              type='email'
              id='email'
              name='email'
              value={user?.emailAddresses[0].emailAddress}
              placeholder='ejemplo@correo.com'
              class='w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors'
              required
            />
            <span
              id='email-error'
              class='text-red-500 text-xs h-4 block opacity-0 transition-opacity duration-200'
            >
              Ingrese un correo electrónico válido
            </span>
          </div>

          <div class='space-y-1'>
            <label for='phone' class='block text-sm font-medium text-slate-700'>
              Teléfono *
            </label>
            <input
              type='tel'
              id='phone'
              name='phone'
              placeholder='(+54) 11 1234-5678'
              class='w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors'
              required
            />
            <span
              id='phone-error'
              class='text-red-500 text-xs h-4 block opacity-0 transition-opacity duration-200'
            >
              Requerido
            </span>
          </div>

          <div class='space-y-1'>
            <label
              for='message'
              class='block text-sm font-medium text-slate-700'
            >
              Mensaje adicional
            </label>
            <textarea
              id='message'
              name='message'
              rows='3'
              placeholder='Agregue cualquier detalle adicional sobre su solicitud...'
              class='w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors resize-none'
            ></textarea>
          </div>

          <div class='pt-2'>
            <button
              id='submit-button'
              type='submit'
              class={`w-full cursor-pointer font-medium py-3 px-4 rounded-md shadow-sm transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 ${
                products.length === 0
                  ? 'bg-gray-400 text-gray-600 cursor-not-allowed'
                  : 'bg-blue-600 hover:bg-blue-700 text-white focus:ring-blue-500'
              }`}
              disabled={products.length === 0}
            >
              {
                products.length === 0
                  ? 'Agregue productos al carrito'
                  : 'Solicitar presupuesto'
              }
            </button>
          </div>

          <p class='text-xs text-slate-500 text-center'>
            * Campos obligatorios
          </p>
        </form>
      </article>
    </div>
  </section>
</MainLayout>

<script>
  import { itemsInCart } from '@/store';
  import { CartCookiesClient } from '@/utils';
  import { navigate } from 'astro:transitions/client';
  import { BudgetFormSchema } from '@/shared/schemas';

  document.addEventListener('astro:page-load', () => {
    // Funcionalidad del carrito
    const deleteButtons: NodeListOf<HTMLButtonElement> =
      document.querySelectorAll('.btn-delete');
    deleteButtons.forEach((button) => {
      button.addEventListener('click', (event) => {
        const productId = button.dataset.id ?? '';

        const cart = CartCookiesClient.removeItem(productId as string);

        itemsInCart.set(cart.length);
        // window.location.reload();
        navigate('/cart');
      });
    });

    // Funcionalidad de incremento de cantidad
    const incrementButtons: NodeListOf<HTMLButtonElement> =
      document.querySelectorAll('.btn-quantity-increment');
    incrementButtons.forEach((button) => {
      button.addEventListener('click', (event) => {
        const productId = button.getAttribute('data-product-id') ?? '';

        if (productId) {
          const currQuantityInput = document.querySelector(
            `input[data-product-id="${productId}"]`
          ) as HTMLInputElement;
          currQuantityInput.value = (
            Number(currQuantityInput.value) + 1
          ).toString();
          CartCookiesClient.updateItem({
            productId: productId,
            quantity: Number(currQuantityInput.value),
          });
        }
      });
    });

    // Funcionalidad de decremento de cantidad
    const decrementButtons: NodeListOf<HTMLButtonElement> =
      document.querySelectorAll('.btn-quantity-decrement');
    decrementButtons.forEach((button) => {
      button.addEventListener('click', (event) => {
        const productId = button.getAttribute('data-product-id') ?? '';

        if (productId) {
          const quantityInput = document.querySelector(
            `input[data-product-id="${productId}"]`
          ) as HTMLInputElement;

          quantityInput.value = Math.max(
            Number(quantityInput.value) - 1,
            1
          ).toString();
          CartCookiesClient.updateItem({
            productId: productId,
            quantity: Number(quantityInput.value),
          });
        }
      });
    });

    // Funcionalidad para inputs de cantidad (cambio directo)
    const quantityInputs: NodeListOf<HTMLInputElement> =
      document.querySelectorAll('input[data-product-id]');
    quantityInputs.forEach((input) => {
      input.addEventListener('change', (event) => {
        const productId = input.getAttribute('data-product-id') ?? '';
        const newQuantity = Number(input.value);

        if (productId && newQuantity >= 1) {
          CartCookiesClient.updateItem({
            productId: productId,
            quantity: newQuantity,
          });
        } else if (newQuantity < 1) {
          // Si la cantidad es menor a 1, restaurar a 1
          input.value = '1';
          CartCookiesClient.updateItem({
            productId: productId,
            quantity: 1,
          });
        }
      });

      // También escuchar el evento 'input' para actualización en tiempo real
      input.addEventListener('input', (event) => {
        const productId = input.getAttribute('data-product-id') ?? '';
        const newQuantity = Number(input.value);

        if (productId && newQuantity >= 1) {
          CartCookiesClient.updateItem({
            productId: productId,
            quantity: newQuantity,
          });
        }
      });
    });

    // Validación del formulario
    const form = document.getElementById('budget-form') as HTMLFormElement;
    const nameInput = document.getElementById('name') as HTMLInputElement;
    const emailInput = document.getElementById('email') as HTMLInputElement;
    const phoneInput = document.getElementById('phone') as HTMLInputElement;

    const nameError = document.getElementById('name-error') as HTMLSpanElement;
    const emailError = document.getElementById(
      'email-error'
    ) as HTMLSpanElement;
    const phoneError = document.getElementById(
      'phone-error'
    ) as HTMLSpanElement;

    // Verificar que todos los elementos existan
    if (!form) {
      return;
    }
    if (!nameInput) {
      return;
    }
    if (!emailInput) {
      return;
    }
    if (!phoneInput) {
      return;
    }
    if (!nameError || !emailError || !phoneError) {
      return;
    }

    // Función para validar un campo específico con Zod
    const validateField = (fieldName: string, value: string) => {
      try {
        const fieldSchema =
          BudgetFormSchema.shape[
            fieldName as keyof typeof BudgetFormSchema.shape
          ];
        fieldSchema.parse(value);
        return { success: true, error: null };
      } catch (error: any) {
        return {
          success: false,
          error: error.errors[0]?.message || 'Error de validación',
        };
      }
    };

    // Función para validar todo el formulario
    const validateForm = () => {
      const formData = {
        name: nameInput.value.trim(),
        email: emailInput.value.trim(),
        phone: phoneInput.value.trim(),
        message:
          (document.getElementById('message') as HTMLTextAreaElement)?.value ||
          '',
      };

      const result = BudgetFormSchema.safeParse(formData);
      return result;
    };

    // Función para mostrar error
    const showError = (
      errorElement: HTMLSpanElement,
      inputElement: HTMLInputElement
    ) => {
      errorElement.classList.remove('opacity-0');
      errorElement.classList.add('opacity-100');
      inputElement.classList.add('border-red-500');
      inputElement.classList.remove('border-slate-300');
    };

    // Función para ocultar error
    const hideError = (
      errorElement: HTMLSpanElement,
      inputElement: HTMLInputElement
    ) => {
      errorElement.classList.remove('opacity-100');
      errorElement.classList.add('opacity-0');
      inputElement.classList.remove('border-red-500');
      inputElement.classList.add('border-slate-300');
    };

    // Validación en tiempo real con Zod
    nameInput.addEventListener('blur', () => {
      const validation = validateField('name', nameInput.value.trim());
      if (!validation.success) {
        nameError.textContent = validation.error;
        showError(nameError, nameInput);
      } else {
        hideError(nameError, nameInput);
      }
    });

    emailInput.addEventListener('blur', () => {
      const validation = validateField('email', emailInput.value.trim());
      if (!validation.success) {
        emailError.textContent = validation.error;
        showError(emailError, emailInput);
      } else {
        hideError(emailError, emailInput);
      }
    });

    phoneInput.addEventListener('blur', () => {
      const validation = validateField('phone', phoneInput.value.trim());
      if (!validation.success) {
        phoneError.textContent = validation.error;
        showError(phoneError, phoneInput);
      } else {
        hideError(phoneError, phoneInput);
      }
    });

    // Validación al enviar el formulario
    form.addEventListener('submit', async (event) => {
      event.preventDefault(); // Siempre prevenir el envío normal

      const submitButton = document.getElementById(
        'submit-button'
      ) as HTMLButtonElement;

      if (submitButton.disabled) {
        return;
      }

      // Validar todo el formulario con Zod
      const validation = validateForm();

      console.log('submit!!!!!!!!!!!!!!!!!!!!!!!!!, ', validation);

      if (!validation.success) {
        // Limpiar errores previos
        hideError(nameError, nameInput);
        hideError(emailError, emailInput);
        hideError(phoneError, phoneInput);

        // Mostrar errores específicos de Zod
        validation.error.issues.forEach((issue) => {
          const fieldName = issue.path[0] as string;
          const message = issue.message;

          switch (fieldName) {
            case 'name':
              nameError.textContent = message;
              showError(nameError, nameInput);
              break;
            case 'email':
              emailError.textContent = message;
              showError(emailError, emailInput);
              break;
            case 'phone':
              phoneError.textContent = message;
              showError(phoneError, phoneInput);
              break;
          }
        });

        // Hacer scroll al primer campo con error
        const firstErrorField = form.querySelector(
          '.border-red-500'
        ) as HTMLElement;
        if (firstErrorField) {
          firstErrorField.scrollIntoView({
            behavior: 'smooth',
            block: 'center',
          });
          firstErrorField.focus();
        }
        return;
      }

      // Si la validación pasa, enviar con server action
      try {
        submitButton.disabled = true;
        submitButton.textContent = 'Enviando...';

        const formData = new FormData(form);

        // Usar la server action de Astro
        const { actions } = await import('astro:actions');
        const result = await actions.sendBudgetRequest(formData);

        if (result.data?.success) {
          // Éxito: mostrar notificación de éxito
          alert('¡Presupuesto enviado exitosamente! ' + result.data.message);

          // Limpiar formulario
          form.reset();

          // Limpiar carrito
          CartCookiesClient.getCart().forEach((item) => {
            CartCookiesClient.removeItem(item.productId);
          });

          // Actualizar contador del carrito
          itemsInCart.set(0);

          // Opcional: redirigir después de un delay
          setTimeout(() => {
            navigate('/');
          }, 3000);
        } else {
          // Error: mostrar notificación de error
          alert(
            'Error al enviar el presupuesto: ' +
              (result.data?.message || 'Ha ocurrido un error inesperado')
          );
        }
      } catch (error) {
        alert(
          'Error de conexión: No se pudo enviar el presupuesto. Verifica tu conexión e inténtalo de nuevo.'
        );
      } finally {
        submitButton.disabled = false;
        // Verificar si aún hay productos en el carrito después de la operación
        const currentCart = CartCookiesClient.getCart();
        submitButton.textContent =
          currentCart.length === 0
            ? 'Agregue productos al carrito'
            : 'Solicitar presupuesto';
      }
    });
  });
</script>
